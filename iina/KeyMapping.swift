//
//  KeyMap.swift
//  iina
//
//  Created by lhc on 12/12/2016.
//  Copyright © 2016 lhc. All rights reserved.
//

import Foundation

class KeyMapping {

  static let prettyKeySymbol: [String: String] = [
    "META": "⌘",
    "ENTER": "⏎",
    "SHIFT": "⇧",
    "ALT": "⌥",
    "CTRL":"⌃",
    "SPACE": "␣",
    "DEL": "⌫",
    "TAB": "⇥",
    "ESC": "⎋",
    "UP": "↑",
    "DOWN": "↓",
    "LEFT": "←",
    "RIGHT" : "→"
  ]

  var key: String

  var action: [String]

  var comment: String?

  var readableAction: String {
    get {
      return action.joined(separator: " ")
    }
  }

  var prettyKey: String {
    get {
      return key
        .characters.split(separator: "+")
        .map { charSeq -> String in
          let token = String(charSeq)
          let uppercasedToken = token.uppercased()
          if let symbol = KeyMapping.prettyKeySymbol[uppercasedToken] {
            return symbol
          } else if let origToken = KeyCodeHelper.reversedKeyMapForShift[token] {
            return KeyMapping.prettyKeySymbol["SHIFT"]! + origToken.uppercased()
          } else {
            return uppercasedToken
          }
        }.joined(separator: "")
    }
  }

  var prettyCommand: String {
    return KeyBindingTranslator.readable(fromCommand: action)
  }

  init(key: String, action: [String], comment: String? = nil) {
    self.key = key
    self.action = action
    self.comment = comment
  }

  static func generateConfData(from mappings: [KeyMapping]) -> String {
    var result = "# Generated by IINA\n\n"
    mappings.forEach { km in
      result += "\(km.key) \(km.readableAction)\n"
    }
    return result
  }
}
